package de.thb.koma.repository.sparql;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.Test;

public class SparqlFusekiTest {
    String uriService = "http://localhost:3030/ds/data";
    String uriKoma = "https://s3-us-west-2.amazonaws.com/ontology.thb.de/koma-complex.owl";

            String querySimple = "" +
            "PREFIX owl: <http://www.w3.org/2002/07/owl#>\n" +
            "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n" +
            "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n" +
            "\n" +
            "SELECT ?comp WHERE {\n" +
            "\t?comp rdf:type owl:Class .\n" +
            "}\n" +
            "ORDER BY ?label";
    String query = "" +
            "PREFIX owl: <http://www.w3.org/2002/07/owl#>\n" +
            "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n" +
            "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n" +
            "PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n" +
            "PREFIX koma: <https://s3-us-west-2.amazonaws.com/ontology.thb.de/koma-complex.owl#>\n" +
            "\n" +
            "\n" +
            "SELECT ?comp ?learn\n" +
            "  \tWHERE {\n" +
            "\t\t?comp rdf:type koma:Competency  .\n" +
            "\t\t?crec koma:associatedCompetency ?comp .\n" +
            "\t\t?learn rdf:type koma:Learner .\n" +
            "\t\t?crec koma:creator ?learn .\n" +
            "}\n" +
            "ORDER BY ASC (?comp) ";

    @Test public void getObject(){

    }

    private void getObjectFromS3(String credentials, String bucket, String file){
        GetObject accessor = new GetObject(credentials, bucket, file);
    }



}
/*
    @Test public void queryExternal(){
        InputStream in;
        DatasetAccessor accessor = DatasetAccessorFactory
                .createHTTP(uriService)
                .putModel(ModelFactory
                        .createDefaultModel()
                        .read(in, uriKoma, "RDF/XML"));
    }
    */
/*
    @Test public void embedded_01() {
        DatasetGraph dsg = dataset() ;
        int port = 3330 ;   // Default port.
        FusekiServer server = FusekiServer.create().add("/ds", dsg).build() ;
        assertTrue(server.getDataAccessPointRegistry().isRegistered("/ds")) ;
        server.start() ;
        query("http://localhost:"+port+"/ds/query", "SELECT * { ?s ?p ?o}", qExec-> {
            ResultSet rs = qExec.execSelect() ;
            assertFalse(rs.hasNext()) ;
        }) ;
        server.stop() ;
    }
*/
/*
    public FusekiServer defaultInit(){
        DatasetGraph dsg = dataset() ;
        int port = 3330 ;   // Default port.
        return FusekiServer.create().add("/ds", dsg).build() ;

    }
*/
/*
    static DatasetGraph dataset() {
    return DatasetGraphFactory.createTxnMem() ;
}
*/
/*
    static void query(String URL, String query, Consumer<QueryExecution> body) {
        try (QueryExecution qExec = QueryExecutionFactory.sparqlService(URL, query) ) {
            body.accept(qExec);
        }
    }
    DatasetAccessorFactory.
        try (QueryExecution qExec = QueryExecutionFactory.sparqlService(URL, query) ) {
            body.accept(qExec);
        }
        DatasetGraph dsg = dataset() ;
        int port = 3330 ;   // Default port.
        FusekiServer server = FusekiServer.create().add("/ds", dsg).build() ;

        assertTrue(server.getDataAccessPointRegistry().isRegistered("/ds")) ;

        server.start() ;
        query("http://localhost:"+port+"/ds/query", "SELECT * { ?s ?p ?o}", qExec-> {
            ResultSet rs = qExec.execSelect() ;
            assertFalse(rs.hasNext()) ;
        }) ;


        server.stop() ;
        new ListObjectsV2Request().withBucketName(uriKoma);

*/