package de.thb.koma.service.sparql.jena;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.jena.query.*;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.RDFNode;
import org.apache.jena.sparql.core.Var;
import org.apache.jena.util.FileManager;
import org.junit.Test;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

public class ControllerTest {
    final String uriKoma = "https://s3-us-west-2.amazonaws.com/ontology.thb.de/koma-complex.owl";
    final String rdfSyntax = "TURTLE";

    @Test
    public void query_owl() {
        Model model = getOntologyTurtle(uriKoma, rdfSyntax);
        String queryString = "" +
                "SELECT * WHERE { " +
                "    ?s ?p ?o ." +
                "}";
        ObjectMapper mapper = new ObjectMapper();
        QueryResultWithMap ba = new QueryResultWithMap();
        Map<String, String> ng = new LinkedHashMap<>();
        Query query = QueryFactory.create(queryString);
        try (QueryExecution qexec = QueryExecutionFactory.create(query, model)) {
            ResultSet results = qexec.execSelect();

            results.getResultVars().forEach(System.out::println);
            while (results.hasNext()) {
                QuerySolution soln = results.nextSolution();
                results.getResultVars().forEach(v -> {
                    RDFNode node = soln.get(v);
                    ng.put(v, node.isResource() ?
                            soln.getResource(v).getLocalName() :
                            soln.getLiteral(v).getString());
                });
                ba.getBody().add(ng);

                //QuerySolution soln = results.nextSolution();
                //soln.varNames().forEachRemaining(System.out::println);

                //( ?p = rdf:type ) ( ?o = owl:Class ) ( ?s = <https://s3-us-west-2.amazonaws.com/ontology.thb.de/koma-complex.owl#CompetencyProfile> ) -> [Root]
                //System.out.println(soln.toString());

                //Literal name = soln.getLiteral("comp");
                //System.out.println(name);
            }
            mapper.writeValue(new FileOutputStream("res.json"), ba);
        } catch (JsonGenerationException e) {
            e.printStackTrace();
        } catch (JsonMappingException e) {
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    private Model getOntologyTurtle(String uriKoma, String rdfSyntax) {
        return FileManager.get().loadModel(uriKoma, rdfSyntax);
    }

}
